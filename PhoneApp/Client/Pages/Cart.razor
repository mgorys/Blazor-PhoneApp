@page "/cart"
@inject ICartService CartService

<PageTitle>Koszyk</PageTitle>

<center><a class="navbar-brand">Koszyk</a></center>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
            <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img href="/product/@product.ProductId" src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                   <div class="container cart-quantity">
                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                   class="form-control input-quantity"
                   min="1" />
                    <button class="btn btn-danger" @onclick="@(() =>RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Usuń z koszyka
                    </button>
                </div>
                </div>
                <div class="cart-product-price">@(product.Price * product.Quantity)PLN</div>
            </div>
        }
        <div class="cart-product-price sum">
            Razem : @cartProducts.Sum(product => @product.Price * product.Quantity)PLN
        </div>
    </div>
}



@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }
}
